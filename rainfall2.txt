
interface RainfallCalculator {
  
  /**
  * Captures rain occured in the given region
  * @param measure amount of rainfall in centi meters
  * @param rainDate date on which rainfall measure is recorded
  * @param pincode identifies the location of rainfall where this was recorded
  */
  void captureRain(Float measure, Date rainDate, String pincode);
  
  /**
  * Region which has gt maximum rainfall in the given . If more than 1 region got the same maximum, then return whichever has got the rain recently.  If both have got the rain on the same date, return whichever was captured first
  */
  RainfallRegion getRegionWithMaxRainfall(Date fromDate, Date toDate);
  
  /**
  * Similar to above, but which region has got minimum rainfall
  */
  RainfallRegion getRegionWithMinRainfall(Date fromDate, Date toDate);
  
  /**
  * Compute the average rainfall in the given date range and return the average
  */
  Float getAverageRainfall(Date fromDate, Date fromDate);
}

class RainfallCalculatorImplement implements RainfallCalculator{
    
    void captureRain(Float measure, Date rainDate, String pincode){
        
        try{
            ps=con.prepareStatement("INSERT INTO Registration VALUES (measure, rainDate, pincode)");
            
            rs=ps.executeQuery();

      }
      catch(Exception e)
      {
          System.out.println("Error in getData"+e);
      }
      System.out.println("Successfully created");
        
    }
    
    int getRegionWithMaxRainfall(Date fromDate, Date toDate){
        int max = 0;
        int resultPincode = 0;
        try{
            ps=con.prepareStatement("select * from table");

            rs=ps.executeQuery();
            while(rs.next())
            {
                Date RowDate=new SimpleDateFormat(rs.getString(2))).parse(sDate1);
                if(RowDate > fromDate && RowDate < toDate){
                    if(rs.getString(1) > measure){
                        max = rs.getString(1);
                        resultPincode = rs.getString(3);
                    }
                }
            }

      }
      catch(Exception e)
      {
          System.out.println("Error in getData"+e);
      }
      return resultPincode;
        
    }
    
    int getRegionWithMinRainfall(Date fromDate, Date toDate){
        int min = 0;
        int resultPincode = 0;
        try{
            ps=con.prepareStatement("select * from table");

            rs=ps.executeQuery();
            while(rs.next())
            {
                Date RowDate=new SimpleDateFormat(rs.getString(2))).parse(sDate1);
                if(RowDate > fromDate && RowDate < toDate){
                    if(rs.getString(1) < measure){
                        max = rs.getString(1);
                        resultPincode = rs.getString(3);
                    }
                }
            }

      }
      catch(Exception e)
      {
          System.out.println("Error in getData"+e);
      }
      return resultPincode;
    }
    
    
    Float getAverageRainfall(Date fromDate, Date toDate){
        int sum = 0;
        int count = 0;
        try{
            ps=con.prepareStatement("select * from table");

            rs=ps.executeQuery();
            while(rs.next())
            {
                Date RowDate=new SimpleDateFormat(rs.getString(2))).parse(sDate1);
                if(RowDate > fromDate && RowDate < toDate){
                    sum = sum + rs.getString(1);
                    count++;
                }
            }

      }
      catch(Exception e)
      {
          System.out.println("Error in getData"+e);
      }
      return sum/count;
    }
    
}